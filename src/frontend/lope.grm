(* Lope Programming Language *)
(* Copyright (c) 2009 Gian Perrone *)
(* gian.perrone at gmail.com *)

structure B = Bigraph
structure P = ParseTree

%%

%name Lope

%term LBR
    | RBR
	| LPAR
	| RPAR
	| COLON
	| SEMI
	| COMMA
	| REACTION
	| REDEX
	| REACTUM
	| LINK
	| ILINK
	| LT
	| GT
	| INT of int
	| IDENT of string
	| SITEIDENT of string
    | ERROR
    | EOF
	  
%nonterm prog of P.parse_tree
	   | bigraph of P.parse_tree
	   | bigraph_list of P.parse_tree list
	   | control of B.lope_control
	   | link of P.parse_tree
	   | link_val_frag of P.link_val
	   | link_val of P.link_val
	   | link_mask_list of P.link_mask list
	   | link_mask of P.link_mask
	   | param_list of (B.label * B.ty) list
	   | param of B.label * B.ty
	   | typesig of B.ty
%pos int
%verbose
%start prog
%eop EOF %noshift EOF

%%

prog: bigraph_list							(P.Node (B.empty, bigraph_list))

bigraph_list: bigraph bigraph_list			(bigraph :: bigraph_list)
            | 								([])

bigraph: LBR bigraph_list RBR				(P.Node (B.new (B.AnonControl ""), bigraph_list))
	   | control LBR bigraph_list RBR		(P.Node (B.new (control), bigraph_list))
       | REACTION IDENT LBR bigraph bigraph	RBR	(P.Node(B.new (B.NodeControl(IDENT,"reaction")),[bigraph1,bigraph2]))
	   | REDEX LBR bigraph_list RBR			(P.Node (B.new (B.AnonControl("redex")), bigraph_list))
	   | REACTUM LBR bigraph_list RBR		(P.Node (B.new (B.AnonControl("reactum")), bigraph_list))
	   | SITEIDENT COLON typesig			(P.Node (B.new (B.SiteControl(SITEIDENT,typesig)), []))
	   | SITEIDENT 							(P.Node (B.new (B.SiteControl(SITEIDENT,"")), []))
	   | link								(link)

link: LINK link_val ILINK link_val			(P.Link ("", link_val1, link_val2))

link_val_frag: bigraph						(P.LinkAnon bigraph)
        | IDENT								(P.LinkName IDENT)
		| COLON typesig						(P.LinkType typesig)

link_val: link_val_frag LT link_mask_list GT (P.LinkMask (link_val_frag, link_mask_list))
       | link_val_frag						(link_val_frag)

link_mask_list: link_mask COMMA link_mask_list	(link_mask :: link_mask_list)
              | link_mask					([link_mask])

link_mask: INT								(P.MaskInt INT)
         | IDENT							(P.MaskName IDENT)
		 | COLON typesig					(P.MaskType typesig)

control: IDENT COLON typesig LPAR param_list RPAR (B.ParamNodeControl (IDENT,typesig,param_list))
       | IDENT COLON typesig LPAR RPAR		(B.NodeControl (IDENT, typesig))	
	   | IDENT LPAR param_list RPAR 		(B.ParamNodeControl (IDENT,"",param_list))
       | IDENT LPAR RPAR					(B.NodeControl (IDENT, ""))
       | IDENT COLON typesig				(B.NodeControl (IDENT1, typesig))
       | IDENT								(B.NodeControl (IDENT, ""))
	   | COLON typesig						(B.AnonControl typesig)
	   | 									(B.AnonControl "")

typesig: IDENT typesig						(IDENT ^ " " ^ typesig)
       | IDENT								(IDENT)

param_list: param COMMA param_list			(param :: param_list)
          | param							([param])

param: IDENT COLON typesig					((IDENT,typesig))
     | IDENT								((IDENT, ""))

