(* Lope Programming Language *)
(* Copyright (c) 2009 Gian Perrone *)
(* gian.perrone at gmail.com *)

structure B = Bigraph
structure P = ParseTree

fun pr x = Debug.debug 5 (Int.toString x ^ "\n")

fun mkArith n t = B.new (B.AnonControl (B.TyCon (B.TyCon (B.TyName t, B.TyName n), B.TyName "arith")))

%%

%name Lope

%term LBR
    | RBR
	| LPAR
	| RPAR
	| COLON
	| SEMI
	| COMMA
	| REACTION
	| REDEX
	| REACTUM
	| LINK
	| TYPE
	| ILINK
	| VAL
	| LT
	| GT
	| LTEQ
	| GTEQ
	| NEQ
	| EQ
	| STAR
	| PLUS
	| MINUS
	| DIV
	| CONCAT
	| WILDCARD
	| INT of int
	| STRING of string
	| IDENT of string
	| POLYIDENT of string
	| SITEIDENT of string
    | ERROR
    | EOF
	  
%nonterm prog of P.parse_tree
	   | bigraph of P.parse_tree
	   | bigraph_list of P.parse_tree list
	   | control of B.lope_control
	   | expr of P.parse_tree
	   | expr_list of P.parse_tree list
	   | link of P.parse_tree
	   | link_val_frag of P.link_val
	   | link_val of P.link_val
	   | link_mask_list of P.link_mask 
	   | link_mask of P.link_mask
	   | param_list of (B.label * B.ty) list
	   | param of B.label * B.ty
	   | typesig of B.ty
	   | type_tuple of B.ty list
%pos int
%verbose
%start prog
%eop EOF %noshift EOF

%%

prog: bigraph_list							(pr 0; P.Node (B.empty, bigraph_list))

bigraph_list: bigraph bigraph_list			(pr 111; bigraph :: bigraph_list)
            | 								(pr 112; [])

bigraph: LBR bigraph_list RBR				(pr 1; P.Node (B.new (B.AnonControl B.TyUnknown), bigraph_list))
	   | control LBR bigraph_list RBR		(pr 2; P.Node (B.new (control), bigraph_list))
       | REACTION IDENT LBR bigraph bigraph	RBR	(pr 3; P.Node(B.new (B.NodeControl(IDENT,B.TyName "reaction")),[bigraph1,bigraph2]))
	   | REDEX LBR bigraph_list RBR			(pr 4; P.Node (B.new (B.AnonControl(B.TyName "redex")), bigraph_list))
	   | REACTUM LBR bigraph_list RBR		(pr 5; P.Node (B.new (B.AnonControl(B.TyName "reactum")), bigraph_list))
	   | SITEIDENT COLON typesig			(pr 6; P.Node (B.new (B.SiteControl(SITEIDENT,typesig)), []))
	   | SITEIDENT 							(pr 7; P.Node (B.new (B.SiteControl(SITEIDENT,B.TyUnknown)), []))
	   | link								(pr 8; link)
	   | TYPE typesig EQ typesig			(pr 9; P.TypeDef (typesig1, typesig2))
	   | VAL IDENT COMMA typesig EQ expr	(pr 50; P.ValDef (IDENT, typesig, expr))
	   | VAL IDENT EQ expr					(pr 51; P.ValDef (IDENT, B.TyUnknown, expr))

link: LINK link_val ILINK link_val			(pr 10; P.Link ("", link_val1, link_val2))

link_val_frag: bigraph						(pr 34; P.LinkAnon bigraph)
        | IDENT								(pr 33; P.LinkName IDENT)
		| COLON typesig						(pr 32; P.LinkType typesig)

link_val: link_val_frag LT link_mask_list GT (pr 31; P.LinkMask (link_val_frag, link_mask_list))
       | link_val_frag						(pr 30; link_val_frag)

link_mask_list: link_mask COMMA link_mask_list	(pr 28; P.MaskList (link_mask :: [link_mask_list]))
              | link_mask					(pr 29; link_mask)

link_mask: INT								(pr 25; P.MaskInt INT)
         | IDENT							(pr 26; P.MaskName IDENT)
		 | COLON typesig					(pr 27; P.MaskType typesig)

control: IDENT COLON typesig LPAR param_list RPAR (pr 10; B.ParamNodeControl (IDENT,typesig,param_list))
       | IDENT COLON typesig LPAR RPAR		(pr 11; B.NodeControl (IDENT, typesig))	
	   | IDENT LPAR param_list RPAR 		(pr 12; B.ParamNodeControl (IDENT,B.TyUnknown,param_list))
       | IDENT LPAR RPAR					(pr 13; B.NodeControl (IDENT, B.TyUnknown))
       | IDENT COLON typesig				(pr 14; B.NodeControl (IDENT1, typesig))
       | IDENT								(pr 15; B.NodeControl (IDENT, B.TyUnknown))
	   | COLON typesig						(pr 16; B.AnonControl typesig)
	   | WILDCARD							(pr 17; B.WildControl B.TyUnknown)
	   | WILDCARD COLON typesig				(pr 18; B.WildControl typesig)
	   | 									(pr 19; B.AnonControl B.TyUnknown)

typesig: IDENT								(pr 40; B.TyName IDENT)
	   | POLYIDENT							(pr 41; B.TyPoly POLYIDENT)
	   | typesig typesig					(pr 42; B.TyCon (typesig1, typesig2))


type_tuple: typesig STAR type_tuple			(pr 24; typesig :: type_tuple)
		  | typesig							(pr 25; [typesig])

param_list: param COMMA param_list			(pr 20; param :: param_list)
          | param							(pr 21; [param])

param: IDENT COLON typesig					(pr 22; (IDENT,typesig))
     | IDENT								(pr 23; (IDENT, B.TyUnknown))

expr: LPAR expr RPAR						(expr)
    | expr PLUS expr						(P.Node (mkArith "add" "int", [expr1, expr2]))
    | expr MINUS expr						(P.Node (mkArith "sub" "int", [expr1, expr2]))
    | expr STAR expr						(P.Node (mkArith "mult" "int", [expr1, expr2]))
    | expr DIV expr							(P.Node (mkArith "div" "int", [expr1, expr2]))
    | expr CONCAT expr						(P.Node (mkArith "concat" "string", [expr1, expr2]))
	| IDENT LPAR expr_list RPAR				(P.Instantiate (IDENT, expr_list))
	| INT									(P.Node (B.new (B.DataControl (B.IntData INT)),[]))
	| IDENT									(P.Node (B.new (B.DataControl (B.VarData (IDENT,B.TyUnknown))), []))
	| STRING								(P.Node (B.new (B.DataControl (B.StringData STRING)),[]))
	| IDENT LPAR RPAR						(P.Instantiate (IDENT,[]))
	| LPAR RPAR								(P.Node (B.new (B.DataControl (B.UnitData)),[]))

expr_list: expr COMMA expr_list				(expr :: expr_list)
         | expr 							([expr])
